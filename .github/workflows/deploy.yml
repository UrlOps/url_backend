name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/url-shortener

jobs:
  build_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Backend
        uses: actions/checkout@v4
        with:
          path: backend

      - name: Checkout Frontend
        uses: actions/checkout@v4
        with:
          repository: 'UrlOps/url_frontend'
          path: frontend

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build Backend (Gradle)
        working-directory: ./backend
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      - name: Build Frontend
        working-directory: ./frontend
        run: |
          npm install
          npm run build

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./backend/Dockerfile
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_push
    steps:
      - name: Deploy to EC2 (SSH)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          port: 443
          script: |
            set -e
            sudo docker pull ${{ env.DOCKER_IMAGE }}:latest
            sudo docker rm -f url-backend || true
            sudo docker run -d --name url-backend \
              -p 8080:8080 --restart always \
              -e DB_URL='${{ secrets.PROD_DB_URL }}' \
              -e DB_USERNAME='${{ secrets.PROD_DB_USERNAME }}' \
              -e DB_PASSWORD='${{ secrets.PROD_DB_PASSWORD }}' \
              -e JWT_SECRET_KEY='${{ secrets.PROD_JWT_SECRET_KEY }}' \
              -e JWT_EXPIRATION_TIME='${{ secrets.PROD_JWT_EXPIRATION_TIME }}' \
              ${{ env.DOCKER_IMAGE }}:latest